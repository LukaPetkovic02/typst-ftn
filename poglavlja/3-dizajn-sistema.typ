= Дизајн система

Циљ овог поглавља је да прикаже укупну архитектуру развијеног система за симулацију 
двоструког клатна и анализу перформанси паралелних имплементација.  
Систем је осмишљен тако да омогући једноставно дефинисање почетних услова, 
покретање симулација у више програмских језика и прикупљање података 
о времену извршавања ради касније анализе.

== Архитектура решења

Систем је дизајниран као скуп независних компоненти које се могу извршавати 
и тестирати појединачно. Основни циљ архитектуре је постизање јасне раздвојености 
између нумеричког језгра симулације, паралелизације и визуализације резултата.


#figure(
  image("../slike/dijagram-arhitekture.png", width: 35%),
  caption: [
    Дијаграм архитектуре
  ]
)<fig:dijagram-arhitekture>


Компоненте система су:
- *Модул за симулацију* — извршава нумеричку интеграцију система 
  диференцијалних једначина користећи Runge–Kutta методу четвртог реда.
- *Модул за паралелизацију* — организује извршавање више независних симулација 
  у различитим процесима или нитима у зависности од изабраног језика.
- *Модул за анализу резултата* — прикупља податке о времену извршавања, 
  броју радних јединица, и израчунава убрзање и ефикасност.
- *Модул за визуализацију* — генерише графиконе и анимације трајекторија 
  ради квалитативне анализе хаотичног понашања.

Сви модули деле заједнички улазни формат параметара, 
који садржи почетне услове и конфигурацију симулације.  
Излазни подаци се чувају у CSV формату ради лакше обраде и поређења 
између различитих имплементација.

== Организација података

Подаци о симулацијама организовани су по моделу једноставне табеле, 
где сваки ред представља један експеримент са својим улазним параметрима и резултатима.  

#figure(
  table(
    columns: 6,
    align: center,
    [ID], [θ₁₀], [θ₂₀], [ω₁₀], [ω₂₀], [Време извршавања (ms)],
    [1], [π/2], [π/2 + 0.01], [0], [0], [123.4],
    [2], [π/2], [π/2 + 0.02], [0], [0], [118.6],
  ),
  caption: [Пример структуре података о симулацијама.]
)<tbl:simulation-data>

Овакав формат омогућава једноставно поређење резултата, 
као и примену статистичке анализе и израду графикона 
попут зависности убрзања од броја процесора.

== Паралелни модел извршавања

Паралелизација у систему се заснива на *ансамбл моделу*, 
где свака нит или процес извршава симулацију са различитим почетним условима.  
Овај приступ избегава проблем секвенцијалне зависности временских корака, 
јер су симулације међусобно независне.

У Python имплементацији користи се библиотека `multiprocessing`,  
у Rust-у `std::thread` и `Rayon`, док Go користи *goroutines* и *channels* 
за конкурентно извршавање.  
У свим случајевима, комуникација између нити је минимална, 
што омогућава скоро идеално скалирање са бројем процесора.

Овако дефинисан систем омогућава флексибилно тестирање различитих језика, 
метода и параметара, уз очување упоредивости резултата.